for (i in 1:nrow(dfrc)) {
yn <- as.integer(dfrc[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dfrc[i,1]
ctrlx1<<-ctrlx1[!is.na(ctrlx1)] #ta global ass
# print(ctrlx)
} else { # print("False")
expx1[i]<-dfrc[i,1]
expx1<<-expx1[!is.na(expx1)] # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)}
#  splitt['ctrl'] <<- ctrlx1
#  splitt['exp'] <<- expx1
}
splitc <-function(x,y){ # where x is a column/list and y is a dummy variable 0/1
dfrc <<- data.frame(x,y)
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dfrc)) {
yn <- as.integer(dfrc[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dfrc[i,1]
ctrlx1<<-ctrlx1[!is.na(ctrlx1)] #ta global ass
# print(ctrlx)
} else { # print("False")
expx1[i]<-dfrc[i,1]
expx1<<-expx1[!is.na(expx1)] # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
splitc(x,y)
splitc <-function(x,y){ # where x is a column/list and y is a dummy variable 0/1
dfrc <<- data.frame(x,y)
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dfrc)) {
yn <- as.integer(dfrc[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dfrc[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
# print(ctrlx)
} else { # print("False")
expx1[i]<-dfrc[i,1]
expx1<-expx1[!is.na(expx1)] # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
splitc(x,y)
splitc <-function(x,y){ # where x is a column/list and y is a dummy variable 0/1
dfrc <<- data.frame(x,y)
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dfrc)) {
yn <- as.integer(dfrc[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dfrc[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
# print(ctrlx)
} else { # print("False")
expx1[i]<-dfrc[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
splitc(x,y)
splitc <-function(x,y){ # where x is a column/list and y is a dummy variable 0/1
dfrc <<- data.frame(x,y)
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dfrc)) {
yn <- as.integer(dfrc[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dfrc[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<-ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dfrc[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
splitc(x,y)
matr <- matrix((runif(104,1,104)), nrow = 52)
matr
dum <- rep(0:1, times = 52)
dum
splitcc <-function(dff){ # where x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff)) {
yn <- as.integer(dff[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<-ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector('numeric', length = nrow(mat))
x <- i
y <- dum
dff <- data.frame(x,y)
apply(dff,2,splitc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
tttesting(matr,dum)
splitcc <-function(dff){ # where x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff)) {
yn <- as.integer(dff[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<-ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector('numeric', length = nrow(mat))
x <- i
y <- dum
dff <- data.frame(x,y)
apply(dff,2,splitc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
dum <- rep(0:1, times = 52)
dum <- rep(0:1, times = 52)
y <- dum
dff <- data.frame(x,y)
dff
x
matr
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector('numeric', length = nrow(mat))
x <- i
y <- dum
dff <- data.frame(x,y)
print(dff)
apply(dff,2,splitc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
c <- c(runif(104,1,104))
g <- rep(0:1, times = 52)
df <-data.frame(c,g)
matr <- matrix((runif(104,1,104)), nrow = 52)
dum <- rep(0:1, times = 52)
x <- vector("numeric")
x <- matr[1]
x <- matr[,1]
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum
dff <- data.frame(x,y)
print(dff)
apply(dff,2,splitc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
dum
y <- dum[1:length(dum)]
y
dff <- data.frame(x,y)
print(dff)
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
apply(dff,2,splitc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
splitted <- apply(dff,2,splitc)
splitted <- apply(dff,2,splitc)
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
splitted <- apply(dff,2,splitcc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
nrow(dff)
dim(dff)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff)) {
yn <- as.integer(dff[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
splitted <- apply(dff,2,splitcc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
#
#
## testing tt
tt <- t.test(mat[,2],mat[,3],
alternative = "two.sided", var.equal = FALSE)
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
splitted <- apply(dff,1,splitcc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
dim(dff)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff)) {
yn <- as.integer(dff[i,2, drop=FALSE])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1, drop=FALSE]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1, drop=FALSE]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting(matr,dum)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff[,1:2])) {
yn <- as.integer(dff[i,2, drop=FALSE])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1, drop=FALSE]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1, drop=FALSE]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting <- function(matr,dum){
tstatssi <<- vector("double", length = ncol(mat))
for (i in 1:ncol(matr)) {
x <- vector("numeric")
x <- matr[,i]
y <- dum[1:nrow(matr)]
dff <- data.frame(x,y)
print(dff)
splitted <- apply(dff,2,splitcc)
tt <- t.test(ctrlx1, expx1,
alternative = "two.sided", var.equal = FALSE)
# print(tt)
tstatssi[i] <- tt$statistic # where i is the column number (x) inputted
return(tstatssi)
}
}
ttesting(matr,dum)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(dff[,])) {
yn <- as.integer(dff[i,2, drop=FALSE])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1, drop=FALSE]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1, drop=FALSE]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting(matr,dum)
# changed to 1:nrow(dff[,])
# yields Error in dff[, ] : incorrect number of dimensions
# browser: function: nrow
# function (x)
# dim(x)[1L]
# but dimensions of dff is 2
dim(dff)
# changed to 1:nrow(dff[,])
# yields Error in dff[, ] : incorrect number of dimensions
# browser: function: nrow
# function (x)
# dim(x)[1L]
# but dimensions of dff is 2
dim(dff)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(matr)) {
yn <- as.integer(dff[i,2, drop=FALSE])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1, drop=FALSE]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1, drop=FALSE]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting(matr,dum)
splitcc <-function(dff){ # where dff is a data frame of x and y,
#x is a column/list and y is a dummy variable 0/1
ctrlx1 <<- vector("numeric")
expx1 <<- vector("numeric")
# splitt <<- matrix(,nrow = 2,ncol=52)
for (i in 1:nrow(matr)) {
yn <- as.integer(dff[i,2])
if (yn==0){ # print("True")
ctrlx1[i]<-dff[i,1]
ctrlx1<-ctrlx1[!is.na(ctrlx1)] #ta global ass
ctrlx1 <<- ctrlx1
# print(ctrlx)
} else { # print("False")
expx1[i]<-dff[i,1]
expx1<-expx1[!is.na(expx1)]
expx1 <<- expx1 # ta global ass
# print(expx)
}
}
print(ctrlx1)
print(expx1)
}
ttesting(matr,dum)
data <- read.csv(https://raw.githubusercontent.com/gedeck/practical-statistics-for-data-scientists/master/data/house_sales.csv)
data <- read.csv("https://raw.githubusercontent.com/gedeck/practical-statistics-for-data-scientists/master/data/house_sales.csv")
View(data)
?sep
## Packages
library(tidyverse) # Load our packages here
dat <- read_table("data/house_sales_mod.csv",  col_names = TRUE)
setwd(~/housepricepred)
setwd(housepricepred)
setwd("housepricepred")
getwd()
dat <- read_table("data/house_sales_mod.csv",  col_names = TRUE)
View(dat)
class(dat)
dat  %>% View()
dat %>% glimpse()
library(tidyverse)
data <- read.csv("https://raw.githubusercontent.com/gedeck/practical-statistics-for-data-scientists/master/data/house_sales.csv"
sep = "\t")
data <- read.csv("https://raw.githubusercontent.com/gedeck/practical-statistics-for-data-scientists/master/data/house_sales.csv",
sep = "\t")
View(data)
data <- data %>%
mutate(Ddate = as.Date(data$DocumentDate))
view(data)
saveRDS(data, "\Data")
saveRDS(data, "\relative_path\file.rds")
data <- readRDS("\relative_path\file.rds")
